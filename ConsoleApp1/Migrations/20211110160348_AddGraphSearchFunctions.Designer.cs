// <auto-generated />
using System;
using ConsoleApp1.Context;
using ConsoleApp1.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211110160348_AddGraphSearchFunctions")]
    partial class AddGraphSearchFunctions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "edge_type", new[] { "relation", "parrent", "children", "like", "liked_by", "viewed", "viewed_by" })
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ConsoleApp1.Entities.Edge", b =>
                {
                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid");

                    b.Property<EdgeType>("Type")
                        .HasColumnType("edge_type");

                    b.Property<Instant>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp");

                    b.HasKey("FromId", "ToId", "Type");

                    b.HasIndex("ToId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.GraphPath", b =>
                {
                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("Path")
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid");

                    b.Property<EdgeType>("Type")
                        .HasColumnType("edge_type");

                    b.ToTable("GraphPath");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.Node", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OwnerId");

                    b.ToTable("Nodes");

                    b.HasDiscriminator<string>("OwnerType").HasValue("Node");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.Workitem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Workitems");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.WorkitemNode", b =>
                {
                    b.HasBaseType("ConsoleApp1.Entities.Node");

                    b.HasDiscriminator().HasValue("Workitem");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.Edge", b =>
                {
                    b.HasOne("ConsoleApp1.Entities.Node", "From")
                        .WithMany("Edges")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Entities.Node", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.Workitem", b =>
                {
                    b.HasOne("ConsoleApp1.Entities.WorkitemNode", "Node")
                        .WithOne("Owner")
                        .HasForeignKey("ConsoleApp1.Entities.Workitem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.Node", b =>
                {
                    b.Navigation("Edges");
                });

            modelBuilder.Entity("ConsoleApp1.Entities.WorkitemNode", b =>
                {
                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
